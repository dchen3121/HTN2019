{"version":3,"sources":["Stats.js","Webcam.js","App.js","serviceWorker.js","index.js"],"names":["Statistics","props","state","title","stat1","stat2","stat3","class","this","React","Component","Webcam","video","document","querySelector","createElement","navigator","mediaDevices","getUserMedia","width","height","then","stream","srcObject","catch","e","console","error","WS_URL","ws","WebSocket","onopen","log","setInterval","canvas","videoWidth","videoHeight","getContext","drawImage","toBlob","b","send","onmessage","message","slouchRoot","data","JSON","parse","textContent","predictions","tagName","establishWebcam","autoplay","id","App","className","Boolean","window","location","hostname","match","ReactDOM","render","getElementById","serviceWorker","ready","registration","unregister"],"mappings":"yOA0BeA,E,YAvBb,WAAYC,GAAQ,IAAD,8BACjB,4CAAMA,KAEDC,MAAQ,CACXC,MAAO,aACPC,MAAO,yBACPC,MAAO,uBACPC,MAAO,QAPQ,E,sEAYjB,OACE,yBAAKC,MAAM,SACT,4BAAKC,KAAKN,MAAMC,OAChB,2BAAIK,KAAKN,MAAME,OACf,2BAAII,KAAKN,MAAMG,OACf,2BAAIG,KAAKN,MAAMI,Y,GAlBEG,IAAMC,WCwDhBC,E,0LAtDX,IAAIC,EAAQC,SAASC,cAAc,iBACtBD,SAASE,cAAc,UAEpC,GAAIC,UAAUC,aAAaC,aAAc,CACvCF,UAAUC,aACPC,aAAa,CAAEN,MAAO,CAAEO,MAAO,IAAKC,OAAQ,OAC5CC,MAAK,SAASC,GACbV,EAAMW,UAAYD,KAEnBE,OAAM,SAAAC,GACLC,QAAQC,MAAMF,MAGlB,IAAMG,EAAS,sBACTC,EAAK,IAAIC,UAAUF,GACzBC,EAAGE,OAAS,WACVL,QAAQM,IAAR,uBAA4BJ,IAC5BK,aAAY,WACV,IAAMC,EAASrB,SAASE,cAAc,UACtCmB,EAAOf,MAAQP,EAAMuB,WACrBD,EAAOd,OAASR,EAAMwB,YACtBF,EAAOG,WAAW,MAAMC,UAAU1B,EAAO,EAAG,GAC5CsB,EAAOK,QAAO,SAAAC,GACZX,EAAGY,KAAKD,QAET,MAGLX,EAAGa,UAAY,SAAAC,GACbjB,QAAQM,IAAIW,GACZ,IAAMC,EAAa/B,SAASC,cAAc,WACtC+B,EAAOC,KAAKC,MAAMJ,EAAQE,MAC9BnB,QAAQM,IAAIa,GACZD,EAAWI,YAAcH,EAAKI,YAAY,GAAGC,Y,0CAMjD1C,KAAK2C,oB,+BAIL,OACE,yBAAK5C,MAAM,UACT,2BAAO6C,SAAS,OAAOC,GAAG,iBAC1B,yBAAKA,GAAG,QACN,uBAAGA,GAAG,iB,GAjDK5C,IAAMC,WCgBZ4C,MAbf,WACE,OACE,yBAAKC,UAAU,OACb,6BACE,kBAAC,EAAD,OAEF,6BACE,kBAAC,EAAD,SCAYC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASjD,SAASkD,eAAe,SD2H3C,kBAAmB/C,WACrBA,UAAUgD,cAAcC,MAAM5C,MAAK,SAAA6C,GACjCA,EAAaC,iB","file":"static/js/main.4f1e515b.chunk.js","sourcesContent":["import React from \"react\";\n\nclass Statistics extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      title: \"Statistics\",\n      stat1: \"Times caught slouching\",\n      stat2: \"Time spent slouching\",\n      stat3: \"test\"\n    };\n  }\n\n  render() {\n    return (\n      <div class=\"stats\">\n        <h2>{this.state.title}</h2>\n        <p>{this.state.stat1}</p>\n        <p>{this.state.stat2}</p>\n        <p>{this.state.stat3}</p>\n      </div>\n    );\n  }\n}\n\nexport default Statistics;\n","import React from \"react\";\n\nclass Webcam extends React.Component {\n  establishWebcam() {\n    var video = document.querySelector(\"#videoElement\");\n    var canvas = document.createElement(\"canvas\");\n\n    if (navigator.mediaDevices.getUserMedia) {\n      navigator.mediaDevices\n        .getUserMedia({ video: { width: 426, height: 240 } })\n        .then(function(stream) {\n          video.srcObject = stream;\n        })\n        .catch(e => {\n          console.error(e);\n        });\n\n      const WS_URL = \"ws://localhost:3001\";\n      const ws = new WebSocket(WS_URL);\n      ws.onopen = () => {\n        console.log(`Connected to ${WS_URL}`);\n        setInterval(() => {\n          const canvas = document.createElement(\"canvas\");\n          canvas.width = video.videoWidth;\n          canvas.height = video.videoHeight;\n          canvas.getContext(\"2d\").drawImage(video, 0, 0);\n          canvas.toBlob(b => {\n            ws.send(b);\n          });\n        }, 3000);\n      };\n\n      ws.onmessage = message => {\n        console.log(message);\n        const slouchRoot = document.querySelector(\"#slouch\");\n        var data = JSON.parse(message.data);\n        console.log(data);\n        slouchRoot.textContent = data.predictions[0].tagName;\n      };\n    }\n  }\n\n  componentDidMount() {\n    this.establishWebcam();\n  }\n\n  render() {\n    return (\n      <div class=\"webcam\">\n        <video autoplay=\"true\" id=\"videoElement\"></video>\n        <div id=\"info\">\n          <p id=\"slouch\"></p>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Webcam;\n","import React from \"react\";\nimport \"./App.css\";\nimport Statistics from \"./Stats\";\nimport Webcam from \"./Webcam\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <div>\n        <Statistics />\n      </div>\n      <div>\n        <Webcam />\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}